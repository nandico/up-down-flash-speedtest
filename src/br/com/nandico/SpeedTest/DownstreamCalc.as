package br.com.nandico.SpeedTest{	public class DownstreamCalc	{		private var packages:Array;				public var downloadingPackageCount:Number = 0;		public var errorPackageCount:Number = 0;		public var finishedPackageCount:Number = 0;		public var idlePackageCount:Number = 0;		private var _bytesTotal:Number = 0;		private var _bytesLoaded:Number = 0;		private var _percentLoaded:Number = 0;			public function DownstreamCalc(packages:Array)		{			this.packages = packages;						updatePackageCount();		}				private function updatePackageCount():void		{			var packageLength:uint = packages.length;			var downstreamPackage:DownstreamPackageModel = null;						downloadingPackageCount = errorPackageCount = finishedPackageCount = idlePackageCount = 0;						for(var i:uint = 0; i < packageLength; i++)			{				downstreamPackage = packages[i];					if(downstreamPackage.status == DownstreamPackageModel.STATUS_DOWNLOADING) downloadingPackageCount++;				if(downstreamPackage.status == DownstreamPackageModel.STATUS_ERROR) errorPackageCount++;				if(downstreamPackage.status == DownstreamPackageModel.STATUS_FINISHED) finishedPackageCount++;				if(downstreamPackage.status == DownstreamPackageModel.STATUS_IDLE) idlePackageCount++;							}		}				private function updateByteMetrics():void		{			var packageLength:uint = packages.length;			var downstreamPackage:DownstreamPackageModel = null;						_bytesTotal = _bytesLoaded = _percentLoaded = 0;						for(var i:uint = 0; i < packageLength; i++)			{				downstreamPackage = packages[i];					if(downstreamPackage.status == DownstreamPackageModel.STATUS_IDLE) continue;								_bytesTotal += downstreamPackage.bytesTotal;				_bytesLoaded += downstreamPackage.bytesLoaded;				_percentLoaded = Math.round((downstreamPackage.bytesLoaded / downstreamPackage.bytesTotal) * 100)			}		}						public function get bytesTotal():Number		{			updateByteMetrics();			return _bytesTotal;		}				public function get bytesLoaded():Number		{			updateByteMetrics();			return _bytesLoaded;		}				public function get percentLoaded():Number		{			updateByteMetrics();			return _percentLoaded;		}				public function getOverallPercentLoaded():Number		{			var packageLength:uint = packages.length;			var downstreamPackage:DownstreamPackageModel = null;						var overallPercentLoaded:Number = 0;						for(var i:uint = 0; i < packageLength; i++)			{				downstreamPackage = packages[i];					if(downstreamPackage.status == DownstreamPackageModel.STATUS_IDLE) continue;								overallPercentLoaded += Math.round((downstreamPackage.bytesLoaded / downstreamPackage.bytesTotal) * 100)			}						return overallPercentLoaded / packageLength;		}				public function getStatus():String		{			updatePackageCount();						if(finishedPackageCount == packages.length)			{				return "Downstream test finished without errors.";			}			else if(errorPackageCount > 0)			{				return "Error in one or more downstream packages.";			}			else			{				return "Downstream test in progress.";			}		}				public function getInstantKbps():Number		{			var packageLength:uint = packages.length;			var downstreamPackage:DownstreamPackageModel = null;						var packageLife:Number = 0;			var packageBytes:Number = 0;						var validIterations:Number = 0;			var overallSpeed:Number = 0;						for(var i:uint = 0; i < packageLength; i++)			{				downstreamPackage = packages[i];				packageLife = 0;					if(downstreamPackage.status == DownstreamPackageModel.STATUS_IDLE || 				   downstreamPackage.status == DownstreamPackageModel.STATUS_ERROR) continue;								if(downstreamPackage.status == DownstreamPackageModel.STATUS_DOWNLOADING)				{					packageLife = (new Date()).valueOf() - downstreamPackage.birthDate.valueOf();					packageBytes = downstreamPackage.bytesLoaded;				}				else				{					packageLife = downstreamPackage.deathDate.valueOf() - downstreamPackage.birthDate.valueOf();					packageBytes = downstreamPackage.bytesLoaded;				}								//				|     - to kb -     |     |    - to secs -    |				overallSpeed += ( packageBytes / 1024 ) / ( packageLife / 1000 );				validIterations ++;			}						return overallSpeed / validIterations;		}	}}