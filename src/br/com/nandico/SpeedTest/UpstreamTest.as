package br.com.nandico.SpeedTest{	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.IOErrorEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import br.com.nandico.SpeedTest.ConfigModel;	import br.com.nandico.SpeedTest.UpstreamPackageModel;	import flash.events.ProgressEvent;	import flash.net.URLVariables;	import flash.utils.ByteArray;	import flash.net.URLRequestMethod;	import flash.net.URLRequestHeader;	public class UpstreamTest extends EventDispatcher	{		public static var packages:Array = new Array();		public static var packageCursor:Number = 0;		public static var configModel:ConfigModel;		public function UpstreamTest()		{		}		private static var dispatcher:EventDispatcher = new EventDispatcher();		public static function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void		{			dispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);		}		public static function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void		{			dispatcher.removeEventListener(type, listener, useCapture);		}		public static function dispatchEvent(event:Event):Boolean		{			return dispatcher.dispatchEvent(event);		}		public static function hasEventListener(type:String):Boolean		{			return dispatcher.hasEventListener(type);		}		public static function startTest(configModel:ConfigModel):void		{			UpstreamTest.configModel = configModel;						for each (var packageConfig:Object in configModel.upstreamPackages)			{				packages.push(new UpstreamPackageModel(randomizeUrl(packageConfig.url), packageConfig.bytes));			}						dispatchEvent(new UpstreamEvent(UpstreamEvent.UPSTREAM_STARTED));			processPackages();		}				private static function randomizeUrl(url:String):String		{			return url + "?" + Math.random();		}		private static function processPackages():void		{			if (packages.length == 0)			{				trace("There is no packages configured for upstream test in config file.");				dispatchEvent(new UpstreamEvent(UpstreamEvent.UPSTREAM_ERROR));				return;			}			var packageLength:uint = packages.length;			var myPackage:UpstreamPackageModel;						for(var i:uint = packageCursor; i < packageLength; i++)			{				myPackage = packages[i];				myPackage.birthDate = new Date();				myPackage.status = UpstreamPackageModel.STATUS_UPLOADING;				startUpstream(myPackage);								if(configModel.upstreamMode == ConfigModel.CONFIG_STREAM_SEQUENTIAL)				{					break;				}			}		}		private static function startUpstream(upstreamPackage:UpstreamPackageModel)		{			upstreamPackage.request = new URLRequest(upstreamPackage.url);			upstreamPackage.loader = new URLLoader();			//upstreamPackage.variables = new URLVariables();						var bytes:ByteArray = new ByteArray();			bytes.position = 0;						for(var i:int = 0; i < upstreamPackage.desiredBytes; i++)			{				bytes.writeByte(1);			}									upstreamPackage.request.data = bytes;			upstreamPackage.request.method = URLRequestMethod.POST;			var header:URLRequestHeader = new URLRequestHeader ("Content-type", "application/octet-stream");			upstreamPackage.request.requestHeaders.push(header);			try			{				upstreamPackage.loader.load(upstreamPackage.request);			}			catch (error:SecurityError)			{				trace("A SecurityError has occurred trying to upstream package '" + upstreamPackage.url + "'.");			}			upstreamPackage.loader.addEventListener(IOErrorEvent.IO_ERROR, upstreamErrorHandler);			upstreamPackage.loader.addEventListener(Event.COMPLETE, upstreamCompleteHandler);			upstreamPackage.loader.addEventListener(ProgressEvent.PROGRESS, upstreamProgressHandler);		}				private static function upstreamErrorHandler(event:IOErrorEvent):void		{			var loader:URLLoader = event.target as URLLoader;			var myPackage:UpstreamPackageModel = getPackageByTarget(loader);						if(myPackage)			{				trace("Package error for " + myPackage.url);				myPackage.status = UpstreamPackageModel.STATUS_ERROR;			}		}				private static function upstreamCompleteHandler(event:Event):void		{			var loader:URLLoader = event.target as URLLoader;			var myPackage:UpstreamPackageModel = getPackageByTarget(loader);						if(myPackage)			{				myPackage.deathDate = new Date();				myPackage.status = UpstreamPackageModel.STATUS_FINISHED;								trace("Finished " + myPackage.url);								trace("Data:" + event.target.data);								dispatchEvent(new UpstreamEvent(UpstreamEvent.UPSTREAM_PACKAGE_FINISHED));								if(isUpstreamFinished())				{					dispatchEvent(new UpstreamEvent(UpstreamEvent.UPSTREAM_FINISHED));				}				else if(configModel.upstreamMode == ConfigModel.CONFIG_STREAM_SEQUENTIAL)				{					packageCursor++;					processPackages();				}			}			else			{				trace("The package was not identified after upstream.")				dispatchEvent(new UpstreamEvent(UpstreamEvent.UPSTREAM_ERROR));			}		}				private static function isUpstreamFinished():Boolean		{			var packageLength:uint = packages.length;			var upstreamPackage:UpstreamPackageModel = null;						for(var i:uint = 0; i < packageLength; i++)			{				if(packages[i].status != UpstreamPackageModel.STATUS_FINISHED)				{					return false;				}			}						return true;		}				private static function getPackageByTarget(loader:URLLoader):UpstreamPackageModel		{			var packageLength:uint = packages.length;			var upstreamPackage:UpstreamPackageModel = null;						for(var i:uint = 0; i < packageLength; i++)			{				if(loader == packages[i].loader)				{					upstreamPackage = packages[i];					break;				}			}						return upstreamPackage;		}				private static function upstreamProgressHandler(event:ProgressEvent):void		{			var percentLoaded:Number = event.bytesLoaded / event.bytesTotal;			percentLoaded = Math.round(percentLoaded * 100);							var loader:URLLoader = event.target as URLLoader;			var myPackage:UpstreamPackageModel = getPackageByTarget(loader);			myPackage.percentLoaded = percentLoaded;			myPackage.bytesTotal = event.bytesTotal;			myPackage.bytesLoaded = event.bytesLoaded;						dispatchEvent(new UpstreamEvent(UpstreamEvent.UPSTREAM_UPDATE));		}	}}