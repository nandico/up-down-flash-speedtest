package br.com.nandico.SpeedTest{	import flash.display.MovieClip;	import flash.text.TextField;	import br.com.nandico.SpeedTest.ConfigLoader;	import br.com.nandico.SpeedTest.ConfigLoaderEvent;	import br.com.nandico.SpeedTest.DownstreamEvent;	import br.com.nandico.SpeedTest.DownstreamTest;	public class SpeedTest extends MovieClip	{		private var configModel:ConfigModel;		public var outputText:TextField;		private var downstreamCalc:DownstreamCalc;		private var upstreamCalc:UpstreamCalc;		public function SpeedTest()		{			ConfigLoader.addEventListener(ConfigLoaderEvent.CONFIG_LOADED, configLoadedHandler);			ConfigLoader.loadConfig();		}		private function configLoadedHandler(event:ConfigLoaderEvent):void		{			configModel = event.result;			if(configModel.downstreamTestEnabled)			{				prepareDownstreamTest();			}			else if(configModel.upstreamTestEnabled)			{				prepareUpstreamTest();			}		}				private function prepareDownstreamTest():void		{			DownstreamTest.addEventListener(DownstreamEvent.DOWNSTREAM_STARTED, handleDownstreamStart);			DownstreamTest.addEventListener(DownstreamEvent.DOWNSTREAM_PACKAGE_FINISHED, handleDownstreamPackageFinished);			DownstreamTest.addEventListener(DownstreamEvent.DOWNSTREAM_FINISHED, handleDownstreamFinished);			DownstreamTest.addEventListener(DownstreamEvent.DOWNSTREAM_ERROR, handleDownstreamError);			DownstreamTest.addEventListener(DownstreamEvent.DOWNSTREAM_UPDATE, handleDownstreamUpdate);			DownstreamTest.startTest(configModel);		}		private function handleDownstreamStart(event:DownstreamEvent):void		{			// ready for calc downstream (now we have downstream packages)			downstreamCalc = new DownstreamCalc(DownstreamTest.packages);		}		private function handleDownstreamPackageFinished(event:DownstreamEvent):void		{			updateOutput();		}		private function handleDownstreamFinished(event:DownstreamEvent):void		{			updateOutput();					if(configModel.upstreamTestEnabled)			{				prepareUpstreamTest();			}		}		private function handleDownstreamError(event:DownstreamEvent):void		{			trace("Downstream error.");			updateOutput();		}		private function handleDownstreamUpdate(event:DownstreamEvent):void		{			updateOutput();		}				private function prepareUpstreamTest():void		{			UpstreamTest.addEventListener(UpstreamEvent.UPSTREAM_STARTED, handleUpstreamStart);			UpstreamTest.addEventListener(UpstreamEvent.UPSTREAM_PACKAGE_FINISHED, handleUpstreamPackageFinished);			UpstreamTest.addEventListener(UpstreamEvent.UPSTREAM_FINISHED, handleUpstreamFinished);			UpstreamTest.addEventListener(UpstreamEvent.UPSTREAM_ERROR, handleUpstreamError);			UpstreamTest.addEventListener(UpstreamEvent.UPSTREAM_UPDATE, handleUpstreamUpdate);			UpstreamTest.startTest(configModel);		}						private function handleUpstreamStart(event:UpstreamEvent):void		{			// ready for calc upstream (now we have upstream packages)			upstreamCalc = new UpstreamCalc(UpstreamTest.packages);		}		private function handleUpstreamPackageFinished(event:UpstreamEvent):void		{			updateOutput();		}		private function handleUpstreamFinished(event:UpstreamEvent):void		{			updateOutput();		}		private function handleUpstreamError(event:UpstreamEvent):void		{			trace("Upstream error.");			updateOutput();		}		private function handleUpstreamUpdate(event:UpstreamEvent):void		{			updateOutput();		}				private function updateOutput():void		{			outputText.text = "\nSpeedTest output - Update: " + new Date() + ". \n\n";				if(configModel.downstreamTestEnabled && downstreamCalc)			{				outputText.appendText("Downstream status: " + downstreamCalc.getStatus() + "\n\n");				outputText.appendText("Package count: " + DownstreamTest.packages.length + "\n");				outputText.appendText("Packages in idle status: " + downstreamCalc.idlePackageCount + "\n");				outputText.appendText("Packages in download: " + downstreamCalc.downloadingPackageCount + "\n");				outputText.appendText("Packages in finished status: " + downstreamCalc.finishedPackageCount + "\n");				outputText.appendText("Packages with error: " + downstreamCalc.errorPackageCount + "\n");					outputText.appendText("\n");					outputText.appendText("Bytes total: " + downstreamCalc.bytesTotal + "\n");				outputText.appendText("Bytes loaded: " + downstreamCalc.bytesLoaded + "\n");				outputText.appendText("Package percent loaded: " + downstreamCalc.percentLoaded + "\n");				outputText.appendText("Overall percent loaded: " + downstreamCalc.getOverallPercentLoaded() + "\n");					outputText.appendText("\n");					outputText.appendText("Instant speed Kbps: " + downstreamCalc.getInstantKbps() + "\n");				outputText.appendText("Minimum downstream speed Kbps: " + configModel.downstreamLimit + "\n");				outputText.appendText("Approved? >>>>>>>>>>>>>>>>>>>>>>>>>>> " + ( downstreamCalc.getInstantKbps() >= configModel.downstreamLimit ) + "\n");								outputText.appendText("\n");			}						if(configModel.upstreamTestEnabled && upstreamCalc)			{				outputText.appendText("Upstream status: " + upstreamCalc.getStatus() + "\n\n");				outputText.appendText("Package count: " + UpstreamTest.packages.length + "\n");				outputText.appendText("Packages in idle status: " + upstreamCalc.idlePackageCount + "\n");				outputText.appendText("Packages uploading: " + upstreamCalc.uploadingPackageCount + "\n");				outputText.appendText("Packages in finished status: " + upstreamCalc.finishedPackageCount + "\n");				outputText.appendText("Packages with error: " + upstreamCalc.errorPackageCount + "\n");					outputText.appendText("\n");					outputText.appendText("Instant speed Kbps: " + upstreamCalc.getInstantKbps() + "\n");				outputText.appendText("Minimum upstream speed Kbps: " + configModel.upstreamLimit + "\n");				outputText.appendText("Approved? >>>>>>>>>>>>>>>>>>>>>>>>>>> " + ( upstreamCalc.getInstantKbps() >= configModel.upstreamLimit ) + "\n");								outputText.appendText("\n");			}					}	}}