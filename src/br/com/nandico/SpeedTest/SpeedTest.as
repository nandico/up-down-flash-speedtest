package br.com.nandico.SpeedTest{	import flash.display.MovieClip;	import flash.text.TextField;	import br.com.nandico.SpeedTest.ConfigLoader;	import br.com.nandico.SpeedTest.ConfigLoaderEvent;	import br.com.nandico.SpeedTest.DownstreamEvent;	import br.com.nandico.SpeedTest.DownstreamTest;	public class SpeedTest extends MovieClip	{		private var configModel:ConfigModel;		public var outputText:TextField;		private var downstreamCalc:DownstreamCalc;		public function SpeedTest()		{			ConfigLoader.addEventListener(ConfigLoaderEvent.CONFIG_LOADED, configLoadedHandler);			ConfigLoader.loadConfig();		}		private function configLoadedHandler(event:ConfigLoaderEvent):void		{			configModel = event.result;			DownstreamTest.addEventListener(DownstreamEvent.DOWNSTREAM_STARTED, handleDownstreamStart);			DownstreamTest.addEventListener(DownstreamEvent.DOWNSTREAM_PACKAGE_FINISHED, handleDownstreamPackageFinished);			DownstreamTest.addEventListener(DownstreamEvent.DOWNSTREAM_FINISHED, handleDownstreamFinished);			DownstreamTest.addEventListener(DownstreamEvent.DOWNSTREAM_ERROR, handleDownstreamError);			DownstreamTest.addEventListener(DownstreamEvent.DOWNSTREAM_UPDATE, handleDownstreamUpdate);			DownstreamTest.startTest(configModel);		}		private function handleDownstreamStart(event:DownstreamEvent):void		{			// preparing Downstream Calculator after downstream packages creation			downstreamCalc = new DownstreamCalc(DownstreamTest.packages);		}		private function handleDownstreamPackageFinished(event:DownstreamEvent):void		{			updateOutput();		}		private function handleDownstreamFinished(event:DownstreamEvent):void		{			updateOutput();		}		private function handleDownstreamError(event:DownstreamEvent):void		{			trace("Downstream error.");			updateOutput();		}		private function handleDownstreamUpdate(event:DownstreamEvent):void		{			updateOutput();		}		private function updateOutput():void		{			outputText.text = "\nSpeedTest output - Update: " + new Date() + ". \n\n";			outputText.appendText("Downstream status: " + downstreamCalc.getStatus() + "\n\n");			outputText.appendText("Package count: " + DownstreamTest.packages.length + "\n");			outputText.appendText("Packages in idle status: " + downstreamCalc.idlePackageCount + "\n");			outputText.appendText("Packages in download: " + downstreamCalc.downloadingPackageCount + "\n");			outputText.appendText("Packages in finished status: " + downstreamCalc.finishedPackageCount + "\n");			outputText.appendText("Packages with error: " + downstreamCalc.errorPackageCount + "\n");			outputText.appendText("\n");			outputText.appendText("Bytes total: " + downstreamCalc.bytesTotal + "\n");			outputText.appendText("Bytes loaded: " + downstreamCalc.bytesLoaded + "\n");			outputText.appendText("Package percent loaded: " + downstreamCalc.percentLoaded + "\n");			outputText.appendText("Overall percent loaded: " + downstreamCalc.getOverallPercentLoaded() + "\n");			outputText.appendText("\n");			outputText.appendText("Instant speed Kbps: " + downstreamCalc.getInstantKbps() + "\n");		}	}}