package br.com.nandico.SpeedTest{	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.IOErrorEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import br.com.nandico.SpeedTest.ConfigModel;	public class ConfigLoader extends EventDispatcher	{		private static const CONFIG_FILE_NAME:String = "SpeedTestConfig.json";		private static var loader:URLLoader;		private static var configModel:ConfigModel;		public function ConfigLoader()		{		}		private static var dispatcher:EventDispatcher = new EventDispatcher();		public static function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void		{			dispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);		}		public static function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void		{			dispatcher.removeEventListener(type, listener, useCapture);		}		public static function dispatchEvent(event:Event):Boolean		{			return dispatcher.dispatchEvent(event);		}		public static function hasEventListener(type:String):Boolean		{			return dispatcher.hasEventListener(type);		}		public static function loadConfig()		{			var request:URLRequest = new URLRequest(CONFIG_FILE_NAME);			loader = new URLLoader();			try			{				loader.load( request );			}			catch (error:SecurityError)			{				trace("A SecurityError has occurred.");			}			loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);			loader.addEventListener(Event.COMPLETE, loadCompleteHandler);		}		public static function loadCompleteHandler(event:Event):void		{			configModel = ConfigModel.parseToModel(loader.data);			dispatchEvent( new ConfigLoaderEvent( ConfigLoaderEvent.CONFIG_LOADED, configModel ) );		}		public static function errorHandler(e:IOErrorEvent):void		{			trace("ErrorHandler has activated.");		}	}}